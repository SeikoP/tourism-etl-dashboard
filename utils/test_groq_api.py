#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test script ƒë·ªÉ ki·ªÉm tra Groq API tr·ª±c ti·∫øp
"""

import os
from groq import Groq

def test_groq_api():
    """Test Groq API v·ªõi m·ªôt prompt ƒë∆°n gi·∫£n"""

    # L·∫•y API key t·ª´ environment variable
    api_key = os.getenv('GROQ_API_KEY')
    if not api_key:
        print("‚ùå GROQ_API_KEY not found in environment variables")
        print("   Please set GROQ_API_KEY in your .env file or environment")
        return

    print("üîç Testing Groq API...")
    print(f"   API Key: {api_key[:10]}...{api_key[-4:] if len(api_key) > 14 else api_key}")
    print()

    try:
        # Kh·ªüi t·∫°o Groq client
        client = Groq(api_key=api_key)

        # Test v·ªõi m·ªôt prompt ƒë∆°n gi·∫£n
        print("üì§ Sending test request...")
        completion = client.chat.completions.create(
            model="gemma2-9b-it",
            messages=[
                {
                    "role": "user",
                    "content": "Xin ch√†o! H√£y gi·ªõi thi·ªáu v·ªÅ b·∫°n b·∫±ng ti·∫øng Vi·ªát."
                }
            ],
            temperature=1,
            max_completion_tokens=1024,
            top_p=1,
            stream=True,
            stop=None
        )

        print("üì• Response:")
        print("-" * 40)

        # Stream response
        full_response = ""
        for chunk in completion:
            content = chunk.choices[0].delta.content or ""
            print(content, end="", flush=True)
            full_response += content

        print("\n" + "=" * 40)
        print("‚úÖ Groq API test successful!")
        print(f"   Response length: {len(full_response)} characters")

    except Exception as e:
        print(f"‚ùå Groq API test failed: {str(e)}")
        print("   Possible issues:")
        print("   - Invalid API key")
        print("   - Network connectivity")
        print("   - Model not available")
        print("   - Rate limiting")

def test_hotel_extraction_prompt():
    """Test v·ªõi prompt extraction hotel"""

    api_key = os.getenv('GROQ_API_KEY')
    if not api_key:
        print("‚ùå GROQ_API_KEY not found")
        return

    print("\nüè® Testing Hotel Extraction Prompt...")
    print("=" * 50)

    try:
        client = Groq(api_key=api_key)

        hotel_prompt = """
        Tr√≠ch xu·∫•t th√¥ng tin t·ª´ trang web kh√°ch s·∫°n Vi·ªát Nam n√†y:

        **Kh√°ch s·∫°n S√†i G√≤n H√† N·ªôi ‚Äì Tr∆∞∆°ng ƒê·ªãnh**

        ƒê·ªãa ch·ªâ: 19 Tr∆∞∆°ng ƒê·ªãnh, B·∫øn Th√†nh, Qu·∫≠n 1, H·ªì Ch√≠ Minh

        Gi√°: 880,000 - 1,466,666 VND

        Ti·ªán √≠ch:
        - WiFi
        - H·ªì b∆°i
        - Nh√† h√†ng
        - ƒêi·ªÅu h√≤a
        - L·ªÖ t√¢n 24h
        - ƒê∆∞a ƒë√≥n s√¢n bay

        H√£y tr√≠ch xu·∫•t th√†nh JSON v·ªõi format:
        {
            "hotel_name": "t√™n kh√°ch s·∫°n",
            "address": "ƒë·ªãa ch·ªâ",
            "price_range": "kho·∫£ng gi√°",
            "amenities": ["ti·ªán √≠ch 1", "ti·ªán √≠ch 2", ...]
        }
        """

        completion = client.chat.completions.create(
            model="gemma2-9b-it",
            messages=[
                {
                    "role": "user",
                    "content": hotel_prompt
                }
            ],
            temperature=0.1,
            max_completion_tokens=1024,
            top_p=1,
            stream=False
        )

        response = completion.choices[0].message.content
        print("üì• AI Response:")
        print(response)

        # Try to parse JSON
        try:
            import json
            parsed = json.loads(response)
            print("\n‚úÖ JSON parsing successful!")
            print(f"   Hotel: {parsed.get('hotel_name', 'N/A')}")
            print(f"   Amenities: {len(parsed.get('amenities', []))} items")
        except json.JSONDecodeError:
            print("\n‚ö†Ô∏è  Response is not valid JSON")

    except Exception as e:
        print(f"‚ùå Hotel extraction test failed: {str(e)}")

if __name__ == "__main__":
    # Load environment variables from .env file
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("üìÑ Loaded environment from .env file")
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv not installed, using system environment")

    test_groq_api()
    test_hotel_extraction_prompt()